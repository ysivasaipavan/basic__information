import { CodegenGeneratorContext, CodegenGenerator, CodegenConfig, CodegenDocument } from '@openapi-generator-plus/types';
import { CodegenOptionsTypeScript, NpmOptions, TypeScriptOptions } from './types';
import Handlebars from 'handlebars';
export { CodegenOptionsTypeScript, NpmOptions, TypeScriptOptions, DateApproach } from './types';
export interface TypeScriptGeneratorContext extends CodegenGeneratorContext {
    loadAdditionalTemplates?: (hbs: typeof Handlebars) => Promise<void>;
    additionalWatchPaths?: () => string[];
    additionalExportTemplates?: (outputPath: string, doc: CodegenDocument, hbs: typeof Handlebars, rootContext: Record<string, unknown>) => Promise<void>;
    defaultNpmOptions?: (config: CodegenConfig, defaultValue: NpmOptions) => NpmOptions;
    defaultTypeScriptOptions?: (config: CodegenConfig, defaultValue: TypeScriptOptions) => TypeScriptOptions;
}
export declare function chainTypeScriptGeneratorContext(base: TypeScriptGeneratorContext, add: Partial<TypeScriptGeneratorContext>): TypeScriptGeneratorContext;
export declare function options(config: CodegenConfig, context: TypeScriptGeneratorContext): CodegenOptionsTypeScript;
export default function createGenerator(config: CodegenConfig, context: TypeScriptGeneratorContext): Omit<CodegenGenerator, 'generatorType'>;
